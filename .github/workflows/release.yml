name: Build and Release YouTube Downloader

on:
  push:
    branches:
      - master

# default: least privileged permissions across all jobs
permissions:
  contents: read
  id-token: write

jobs:
  # build exe in window
  build:
    runs-on: windows-latest

    permissions:
      contents: write

    # 같은 브렌치에서 동시에 여러개의 워크플로우가 실행되지 않도록 방지
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Cache ffmpeg
        uses: actions/cache@v4
        id: ffmpeg-cache
        with:
          path: ffmpeg
          key: ffmpeg-cache-v1

      - name: Download ffmpeg
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "=== Downloading ffmpeg ==="
          curl.exe -L -o ffmpeg.zip https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg
          move "ffmpeg\*\bin\ffmpeg.exe" "ffmpeg\"
          Write-Host "=== Cleaning up extracted folders ==="
          Get-ChildItem -Path "ffmpeg" -Directory | Where-Object { $_.Name -ne "ffmpeg.exe" } | Remove-Item -Recurse -Force
          Remove-Item ffmpeg.zip -Force
          Write-Host "=== ffmpeg cached successfully ==="
          

      - name: Build Executable
        shell: powershell
        run: |
          Write-Host "=== Building Executable ==="
          pyinstaller --onedir --windowed --clean --name YouTubeDownloader "main.py"
          Write-Host "=== Build complete ==="

      - name: Make Distribution Artifacts to Zip
        shell: powershell
        run: |
          Write-Host "=== Move ffmpeg ==="
          move "ffmpeg\" "dist\YouTubeDownloader\"
          Write-Host "=== zip to YouTubeDownloader ==="
          Compress-Archive -Path "dist\YouTubeDownloader" -DestinationPath "dist\YouTubeDownloader.zip"
          Write-Host "=== zip complete ==="
          

      - name: Upload | Distribution Artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist

  release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ success() }}

    permissions:
      contents: write

    steps:
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit). You may omit this step
        # if you have 'commit: false' in your configuration.
        #
        # You may consider moving this to a repo script and call it from this step instead
        # of writing it in-line.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | awk -F '\\.\\.\\.' '{print $2}' | cut -d ' ' -f1)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        uses: python-semantic-release/python-semantic-release@v10.4.1
        with:
          github_token: ${{ secrets.GH_TOKEN }}

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.4.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
